options {
    STATIC = false;
}

// This PLM parser performs 2 main operations: Parsing and Evaluation
// The Parsing task makes sure that the input code follows the rules of the PLM language correctly
// The Evaluation task will take the validated program code and provides a correct output.

PARSER_BEGIN(Assignment)

import java.util.*;

public class Assignment{

    ArrayList<String> definedFuncs = new ArrayList<String>();
    HashMap<String, Integer> calledFuncs = new HashMap<String, Integer>();

    // Hashmap will store the function names alongside sections of the function bodies
    // The arraylist in the map will store each token separately
    HashMap<String, ArrayList<String>> functions = new HashMap<String, ArrayList<String>>();

    // stores all the functions called in the currentFunc
    ArrayList<String> callsInCurrent = new ArrayList<String>();

    // keeps track of the function that is being parsed
    String currentFunc = "";
    int lineNumber = 1;
    boolean isMain = false;
    boolean inCall = false;
    boolean divergence = false;

    public static void main(String args []) throws ParseException, TokenMgrError {

        Assignment parser = new Assignment(System.in);
        try {
            parser.Start();
        } catch (ParseException e) {
            System.out.println("FAIL");
            System.err.println(parser.lineNumber);
            System.err.println(e.getMessage());
            System.exit(0);
        }
        checkDivergence(parser);
        evaluateProgram(parser);
    }

    // method to return error messages to user
    public static void printError(String error, int lineNumber) {
        System.out.println("FAIL");
        System.err.println(lineNumber);
        System.err.println(error);
        System.exit(0);
    }

    public static void evaluateProgram(Assignment parser) {
        String mainExpression = decomposeFunction(parser, "MAIN", "");
        // returns a stack of operations in a postfix order
        Queue<String> exp = infixToPostfix(mainExpression);
        int result = evaluatePostfix(exp);
        System.out.println(result);

    }

    // method to check for infinite loops/recursion by examining function bodies
    public static void checkDivergence(Assignment parser) {
        if (parser.divergence) {System.out.println("DIVERGENCE"); System.exit(0);}
    }

    // Check if the character is numeric
    public static boolean isNumeric(String str) {
        try {
            Double.parseDouble(str);
            return true;
      } catch(NumberFormatException e){
            return false;
      }
    }

    // Check if the character is an operator (* or +)
    public static boolean isOperator(String str) {
        if (str.equals("+") | str.equals("*")) {
            return true;
        }
        return false;
    }

    // Check if the character is the start of a function call (uppercase char)
    public static boolean isFunction(String str) {
        if (Character.isUpperCase(str.charAt(0))) {
            return true;
        }
        return false;
    }

    // Check if the character is a parameter (lowercase char)
    public static boolean isParameter(String str) {
        if (Character.isLowerCase(str.charAt(0))) {
            return true;
        }
        return false;
    }

    // Finds the Function name from the String token
    public static String processFunctionName(String function) {
        String funcName = "";
        //System.out.println(function);
        for (int i = 0; i < function.length(); i++) {
            if (Character.toString(function.charAt(i)).equals("(")) {
                return funcName;
            }
            funcName += function.charAt(i);
        }
        return funcName;
    }

    // Finds the Function body from the String token
    public static String processFunctionBody(String function) {
        String body = "";
         int parenthesisCount = 0;
         for (int i = 0; i < function.length(); i++) {
             if (Character.toString(function.charAt(i)).equals("(")) {
                 parenthesisCount++;
             } else if (Character.toString(function.charAt(i)).equals(")")) {
                 parenthesisCount--;
             }

             if (parenthesisCount > 0) {
                 body += function.charAt(i);
             }
         }
         return body.substring(1, body.length());
    }

    // If there is a function call in the function body, decompose the call to the function declaration
    public static String decomposeFunction(Assignment parser, String funcName, String args) {
        ArrayList<String> functionDefinition = parser.functions.get(funcName);
        String newFunction = ""; //stores decomposition as String
        boolean decomposed = false;
        boolean callPresent = false; // tells the function there is a function call that needs to be decomposed

        for (String s : functionDefinition) {
            if (isNumeric(s)) {
                //System.out.println("Number");
                newFunction += s;
            }

            else if (isParameter(s)) {
                // replace the parameter with the function body e.g. S -> A(2) where A -> x+1 then S -> 2+1
                // first check if the parameters have a function call that needs to be decomposed
                while (true) {
                    String func = findFunction(args);
                    if (func != null) {
                        String funcCall = processFunctionName(func);
                        String funcParams = processFunctionBody(func);
                        String decomposedCall = "(" + decomposeFunction(parser, funcCall, funcParams) + ")";
                        args = args.replace(func, decomposedCall);
                    } else {break;}
                }
                newFunction += "(" + args + ")";

            }

            else if (isOperator(s)) {
                //System.out.println("Operator");
                newFunction += s;
            }

            else if (isFunction(s)) {
                //System.out.println("Function");
                String funcCall = processFunctionName(s);
                String funcParams = processFunctionBody(s);

                // need to check if the function body contains the parameter so that it can swap it for the actual value in "args"
                String funcParameter = findParameter(funcParams);
                if (funcParameter != null) {
                    funcParams = funcParams.replace(funcParameter, args);
                }
                // decompose this function call further using recursion
                String decomposedCall = decomposeFunction(parser, funcCall, funcParams);
                newFunction += "(" + decomposedCall + ")";
                callPresent = true;
            }

        }

        return newFunction;
    }

    // finds the function call in the argument body
    public static String findFunction(String str) {
        boolean processing = false;
        int startInt = 0;
        int endInt = str.length();

        for (int i = 0; i < str.length(); i++) {
            if (Character.isUpperCase(str.charAt(i))) {
                if (processing) {
                    continue;
                } else {
                    startInt = i;
                    processing = true;
                }
            } else if (Character.toString(str.charAt(i)).equals(")")) {
                if (processing) {
                    processing = false;
                    endInt = i;
                    return str.substring(startInt, endInt+1);
                }
            }
        }
        return null;
    }

    // finds the function call in the argument body
        public static String findParameter(String str) {
            boolean processing = false;
            int startInt = 0;
            int endInt = str.length();

            for (int i = 0; i < str.length(); i++) {
                if (Character.isLowerCase(str.charAt(i))) {
                    if (processing) {
                        continue;
                    } else {
                        startInt = i;
                        processing = true;
                    }
                } else {
                    if (processing) {
                        processing = false;
                        endInt = i;
                        //System.out.println("PARAMETER FOUND: " + str.substring(startInt, endInt-1));
                        return str.substring(startInt, endInt+1);
                    }
                }
            }

            if (processing) {
                endInt = str.length()-1;
                return str.substring(startInt, endInt+1);
            }
            else {return null;}
        }

    // A utility function to return precedence of a given operator
    // Higher returned value means higher precedence
    public static int Prec(char ch)
    {
        switch (ch)
        {
        case '+':
        case '-':
            return 1;

        case '*':
        case '/':
            return 2;

        case '^':
            return 3;
        }
        return -1;
    }

    // The main method that converts given infix expression
    // to postfix expression.
    public static Queue<String> infixToPostfix(String exp)
    {
        // initializing empty String for result
        String result = new String("");
        Queue<String> postfix = new LinkedList<String>();

        // initializing empty stack
        Stack<String> stack = new Stack<String>();

        for (int i = 0; i<exp.length(); ++i)
        {
            char c = exp.charAt(i);

             // If the scanned character is an operand, add it to output.
            if (Character.isLetter(c)) {
                result += c;
                postfix.add(Character.toString(c));
            }

            // If the scanned character is an operand, add it to output.
            else if (Character.isDigit(c)) {
                int startInt = i;
                int endInt = i;
                for (int j = i+1; j < exp.length(); j++) {
                    if (Character.isDigit(exp.charAt(j))) {
                        endInt = j;
                        continue;
                    } else {
                        break;
                    }
                }
                String s = exp.substring(startInt, endInt+1);
                result += s;
                postfix.add(s);
                i = endInt;
            }
            // If the scanned character is an '(', push it to the stack.
            else if (Character.toString(c).equals("(")) {
                stack.push(Character.toString(c));
            }

            //  If the scanned character is an ')', pop and output from the stack
            // until an '(' is encountered.
            else if (Character.toString(c).equals(")"))
            {
                while (!stack.isEmpty() && !stack.peek().equals("(")) {
                    String elem = stack.pop();
                    result += elem;
                    postfix.add(elem);
                }

                if (!stack.isEmpty() && !stack.peek().equals("(")) {
                    System.out.println("Invalid Expression");
                    System.exit(0);
                }
                else
                    stack.pop();
            }
            else // an operator is encountered
            {
                while (!stack.isEmpty() && Prec(c) <= Prec(stack.peek().charAt(0))){
                    if(stack.peek().equals("(")) {
                        System.out.println("Invalid Expression");
                        System.exit(0);
                    }
                    String elem = stack.pop();
                    result += elem;
                    postfix.add(elem);
                }
                stack.push(Character.toString(c));
            }

        }

        // pop all the operators from the stack
        while (!stack.isEmpty()){
            if(stack.peek().equals("(")) {
                System.out.println("Invalid Expression");
                System.exit(0);
            }
            String elem = stack.pop();
            result += elem;
            postfix.add(elem);
        }
        return postfix;
    }

    // Method to evaluate value of a postfix expression from a queue of tokens(operands and operators)
    public static int evaluatePostfix(Queue<String> exp) {
        //create a stack
        Stack<Integer> stack=new Stack<Integer>();

        // Scan all characters one by one
        while (!exp.isEmpty())
        {
            String s = exp.remove();

            // If the scanned character is an operand (number here),
            // push it to the stack.
            if (isNumeric(s))
            stack.push(Integer.parseInt(s));

            //  If the scanned character is an operator, pop two
            // elements from stack apply the operator
            else
            {
                int val1 = stack.pop();
                int val2 = stack.pop();

                switch(s)
                {
                    case "+":
                    stack.push(val2+val1);
                    break;

                    case "*":
                    stack.push(val2*val1);
                    break;
              }
            }
        }
        return stack.pop();
    }
}

PARSER_END(Assignment)

//SKIP: {}

/* Keywords of PLM */
TOKEN: {
    < EOL : "\n" | "\r" |"\r\n" > |
    < DEF : "DEF" > |
    < MAIN : "MAIN" > |
    < FUNC_NAME : (["A"-"Z"])+ > |
    < PARAMETER : (["a"-"z"])+ > |
    < NUMBER : ["0"-"9"] | ["1"-"9"](["0"-"9"])+ > |
    < PLUS : "+" > |
    < TIMES : "*" > |
    < STRING : (<FUNC_NAME>|<PARAMETER>|<NUMBER>)+ > |
    < DECIMAL : ("0" | <NUMBER>) "." ("0" | <NUMBER>) >
}

TOKEN : {
    < LBRACE : "{" > |
    < RBRACE : "}" > |
    < SPACE : " " >
}

TOKEN: {
    < LEFT_PARENTHESIS : "(" > |
    < RIGHT_PARENTHESIS : ")" > |
    < SEMICOLON : ";" > |
    < SPECIAL : (["[", "\\", "^", "$", ".", "|", "?"])+ >
}
void Start():
{
    Token p = null;
    Token f = null;
}
{
    // one or more functions can be implemented in the PLM program
    // but there has to be at least one function otherwise it is not valid.
    (
        try {<DEF>} catch (ParseException e) {printError("Missing keyword DEF at the start of newline", lineNumber);}
        try {<SPACE>} catch (ParseException e) {printError("Missing single space after DEF", lineNumber);}
        (
            // MAIN METHOD
            try {<MAIN>} catch (ParseException e) {printError("Missing MAIN keyword", lineNumber);}
            {
                p = null;
                currentFunc = "MAIN";
                functions.put(currentFunc, new ArrayList<String>());
                callsInCurrent = new ArrayList<String>();
            }
            try {<SPACE>} catch (ParseException e) {printError("Missing single space after MAIN keyword", lineNumber);}

            // checks made to see if a parameter is entered in the MAIN function
            try {p = <PARAMETER>} catch (ParseException e) {}
            {
                if (p != null) {
                    printError("Parameter illegal", lineNumber);
                }
            }
            try {Function(null)} catch (ParseException e) {printError("MAIN function body missing", lineNumber);}
        |
            // OTHER FUNCTION DECLARATIONS
            try {f = <FUNC_NAME>} catch (ParseException e) {printError("Function name missing after space", lineNumber);}
            {
                currentFunc = f.image.toString();
                functions.put(currentFunc, new ArrayList<String>());
                callsInCurrent = new ArrayList<String>();
            }
            try {<SPACE>} catch (ParseException e) {printError("Missing single space after '" + f.image.toString() + "'", lineNumber);}

            (
                try {p = <PARAMETER>} catch (ParseException e) {printError("Missing parameter after space", lineNumber);}
            |
                (p = <FUNC_NAME>) {printError("Invalid parameter name '" + p.image.toString() + "'", lineNumber);}
            )

            try {<SPACE>} catch (ParseException e) {printError("Missing space after parameter '" + p.image.toString() + "'", lineNumber);}

            try {Function(p.image.toString())} catch (ParseException e) {printError("Missing function body", lineNumber);}
        )
        {
            // adds all the function names that have been defined
            if (definedFuncs.contains(currentFunc)) {
                printError(currentFunc + " is defined more than once", lineNumber);
            }
            definedFuncs.add(currentFunc);
        }
        try {<SPACE>} catch (ParseException e) {printError("Missing single space after '}'", lineNumber);}
        try {<SEMICOLON>} catch (ParseException e) {printError("Missing ';' after right brace", lineNumber);}
        try {<EOL>} catch (ParseException e) {printError("Missing EOL after ';'", lineNumber-1);}
    )+
    try {<EOF>} catch (ParseException e) {printError("Missing EOF after last function declaration", lineNumber);}

    {
        if (!definedFuncs.contains("MAIN")) {
            lineNumber = 0;
            printError("MAIN is not defined in the program", lineNumber);
        }

        for (HashMap.Entry<String, Integer> entry : calledFuncs.entrySet()) {
            String key = entry.getKey();
            Integer value = entry.getValue();
            if (!definedFuncs.contains(key)) {
                printError(key + " is not defined in the program", value);
            }
        }

        System.out.println("PASS");
    }
}

// defines the MAIN function in PLM
void Function(String p):
{}
{
    try {<LBRACE>} catch (ParseException e) {printError("Missing '{' after space", lineNumber);}
    try {<SPACE>} catch (ParseException e) {printError("Missing single space after '{'", lineNumber);}
    try {Body(p)} catch (ParseException e) {printError("MAIN method undefined", lineNumber);}
    try {<SPACE>} catch (ParseException e) {printError("Missing single space after MAIN body expression", lineNumber);}
    try {<RBRACE>} catch (ParseException e) {printError("Missing '}' after space", lineNumber);}
    {
        lineNumber++;
    }
}

// defines the function body in PLM
void Body(String p):
{
    Token t1 = null;
    Token t2 = null;
    String call = "";
}
{
    try {(t1 = <PARAMETER> | t1 = <NUMBER> | call = Function_Call(p) | t1 = <MAIN>)}
    catch (ParseException e) {printError("Expecting a parameter, positive integer, or function call in body", lineNumber);}
    {
        if (t1 != null && t1.kind == MAIN) {
            printError("MAIN function cannot be called", lineNumber);
        }
        if (p != null && t1 != null && t1.kind == PARAMETER && !t1.image.toString().equals(p)) {
            printError("Illegal parameter in body", lineNumber);
        }
        if (p == null && t1 != null && t1.kind == PARAMETER) {
            printError("MAIN cannot contain parameters in body", lineNumber);
        }
        // adds the correct token to the function hashmap
        if (t1 == null) {
            functions.get(currentFunc).add(call);
        } else {
            functions.get(currentFunc).add(t1.image.toString());
        }

        t1 = null;
    }

    (
        (
            // ADDITION expressions
            try {<PLUS>} catch (ParseException e) {printError("Missing '+' operator in expression", lineNumber);}
            {functions.get(currentFunc).add("+");}

            try {(t2 = <PARAMETER> | t2 = <NUMBER> | call = Function_Call(p) | t2 = <MAIN>)}
            catch (ParseException e) {printError("Expecting a parameter, positive integer, or function call in body", lineNumber);}
        |
            // MULTIPLICATION expressions
            try {<TIMES>} catch (ParseException e) {printError("Missing '*' operator in expression", lineNumber);}
            {functions.get(currentFunc).add("*");}

            try {(t2 = <PARAMETER> | t2 = <NUMBER> | call = Function_Call(p) | t2 = <MAIN>)}
            catch (ParseException e) {printError("Expecting a parameter, positive integer, or function call in body", lineNumber);}
        )

        // Conditional checks for legality of the parameter values
        {
            if (t2 != null && t2.kind == MAIN) {
                printError("MAIN function cannot be called", lineNumber);
            }
            // Checks if the parameter is the correct value defined at the start of the function declaration
            if (p != null && t2 != null && t2.kind == PARAMETER && !t2.image.toString().equals(p)) {
                printError("Illegal parameter in body", lineNumber);
            }
            // Checks if there are parameters when the parser examines the MAIN function
            if (p == null && t2 != null && t2.kind == PARAMETER) {
                printError("MAIN cannot contain parameters in body", lineNumber);
            }
            // adds the correct token to the functions hashmap
            if (t2 == null) {
                functions.get(currentFunc).add(call);
            } else {
                functions.get(currentFunc).add(t2.image.toString());
            }

            t2 = null;
        }
    )*
}

// defines a function call in PLM
String Function_Call(String p):
{
    String body = "";
    Token f = null;
}
{
    try {f = <FUNC_NAME>} catch (ParseException e) {printError("Missing function name in function call", lineNumber);}

    try {<LEFT_PARENTHESIS>} catch (ParseException e) {printError("Missing '(' after function call '" + f.image.toString() + "'", lineNumber);}

    try {body = Call_Body(p)} catch (ParseException e) {printError("Function call '" + f.image.toString() + "' has an empty body", lineNumber);}

    try {<RIGHT_PARENTHESIS>} catch (ParseException e) {printError("Missing ')' after function body", lineNumber);}


    {
        String name = f.image.toString();
        // checks for divergence by seeing if there is RECURSION, or if:
        // the called function has been called before in the program, AND the current function has been called, and this repeated call is not in the current function body
        if (name.equals(currentFunc) || (calledFuncs.containsKey(name) && calledFuncs.containsKey(currentFunc) && !callsInCurrent.contains(name))) {
            divergence = true;
        }
        calledFuncs.put(name, lineNumber);
        callsInCurrent.add(name);
        body  = name + "(" + body + ")";
        return body;
    }
}

// non-terminal used to help store the call token as one string in the hashmap
String Call_Body(String p):
{
    Token t1 = null;
    Token t2 = null;
    String body = "";
    String call = "";
}
{
    try {(t1 = <PARAMETER> | t1 = <NUMBER> | call = Function_Call(p)) | t1 = <MAIN>}
    catch (ParseException e) {printError("Expecting a parameter, positive integer, or function call in body", lineNumber);}
    {
        if (t1 != null && t1.kind == MAIN) {
            printError("MAIN function cannot be called", lineNumber);
        }
        // checks if the parameter is valid
        if (p != null && t1 != null && t1.kind == PARAMETER && !t1.image.toString().equals(p)) {
            printError("Illegal parameter in body", lineNumber);
        }
        //checks if a parameter is present when the function is MAIN
        if (p == null && t1 != null && t1.kind == PARAMETER) {
            printError("MAIN cannot contain parameters in body", lineNumber);
        }

        if (t1 != null) {
            body += t1.image.toString();
        } else {
            body += call;
        }

        t1 = null;
    }

    (
        (
            //ADDITION expression
            try {<PLUS>} catch (ParseException e) {printError("Missing '+' operator in expression", lineNumber);}
            {body += "+";}

            try {(t2 = <PARAMETER> | t2 = <NUMBER> | call = Function_Call(p) | t2 = <MAIN>)}
            catch (ParseException e) {printError("Expecting a parameter, positive integer, or function call in body", lineNumber);}
        |
            //MULTIPLICATION expression
            try {<TIMES>} catch (ParseException e) {printError("Missing operator '*' from expression", lineNumber);}
            {body += "*";}

            try {(t2 = <PARAMETER> | t2 = <NUMBER> | call = Function_Call(p) | t2 = <MAIN>)}
            catch (ParseException e) {printError("Expecting a parameter, positive integer, or function call in body", lineNumber);}
        )
        {
            if (t2 != null && t2.kind == MAIN) {
                printError("MAIN function cannot be called", lineNumber);
            }

            if (p != null && t2 != null && t2.kind == PARAMETER && !t2.image.toString().equals(p)) {
                printError("Illegal parameter in body", lineNumber);
            }
            if (p == null && t2 != null && t2.kind == PARAMETER) {
                printError("MAIN cannot contain parameters in body", lineNumber);
            }

            if (t2 != null) {
                body += t2.image.toString();
            } else {
                body += call;
            }

            // sets t2 as null in case there is more than 1 expression after
            t2 = null;
        }
    )*
    { return body; }
}
