options {
    STATIC = false;
}

PARSER_BEGIN(Assignment)

import java.util.*;

public class Assignment{

    ArrayList<String> definedFuncs = new ArrayList<>();
    ArrayList<String> calledFuncs = new ArrayList<>();

    // Hashmap will store the function names alongside sections of the function bodies
    // The arraylist in the map will store each token separately
    HashMap<String, ArrayList<String>> functions = new HashMap<>();

    // stores all the functions called in the currentFunc
    ArrayList<String> callsInCurrent = new ArrayList<>();

    // keeps track of the function that is being parsed
    String currentFunc = "";
    int lineNumber = 1;
    boolean inCall = false;
    boolean divergence = false;

    public static void main(String args []) throws ParseException, TokenMgrError {

        Assignment parser = new Assignment(System.in);
        try {
            parser.Start();
        } catch (ParseException e) {
            System.out.println("FAIL");
            System.err.println(parser.lineNumber);
            System.err.println(e.getMessage());
            System.exit(0);
        }
        checkDivergence(parser);
        evaluateProgram(parser);
    }

    // method to return error messages to user
    public static void printError(String error, int lineNumber) {
        System.out.println("FAIL");
        System.err.println(lineNumber);
        System.err.println(error);
        System.exit(0);
    }

    public static void evaluateProgram(Assignment parser) {
        System.out.println(parser.functions.get("A"));
        String mainExpression = decomposeFunction(parser, "MAIN", "");
        System.out.println(mainExpression);
        // returns a stack of operations in a postfix order
        Queue<String> exp = infixToPostfix(mainExpression);
        int result = evaluatePostfix(exp);
        System.out.println(result);

    }

    // method to check for infinite loops/recursion by examining function bodies
    public static void checkDivergence(Assignment parser) {
        if (parser.divergence) {System.out.println("DIVERGENCE"); System.exit(0);}
    }

    // Check if the character is numeric
    public static boolean isNumeric(String str) {
        try {
            Double.parseDouble(str);
            return true;
      } catch(NumberFormatException e){
            return false;
      }
    }

    // Check if the character is an operator (* or +)
    public static boolean isOperator(String str) {
        if (str.equals("+") | str.equals("*")) {
            return true;
        }
        return false;
    }

    // Check if the character is the start of a function call (uppercase char)
    public static boolean isFunction(String str) {
        if (Character.isUpperCase(str.charAt(0))) {
            return true;
        }
        return false;
    }

    // Check if the character is a parameter (lowercase char)
    public static boolean isParameter(String str) {
        if (Character.isLowerCase(str.charAt(0))) {
            return true;
        }
        return false;
    }

    // Finds the Function name from the String token
    public static String processFunctionName(String function) {
        String funcName = "";
        //System.out.println(function);
        for (int i = 0; i < function.length(); i++) {
            if (Character.toString(function.charAt(i)).equals("(")) {
                return funcName;
            }
            funcName += function.charAt(i);
        }
        return funcName;
    }

    // Finds the Function body from the String token
    public static String processFunctionBody(String function) {
        String body = "";
         int parenthesisCount = 0;
         for (int i = 0; i < function.length(); i++) {
             if (Character.toString(function.charAt(i)).equals("(")) {
                 parenthesisCount++;
             } else if (Character.toString(function.charAt(i)).equals(")")) {
                 parenthesisCount--;
             }

             if (parenthesisCount > 0) {
                 body += function.charAt(i);
             }
         }
         return body.substring(1, body.length());
    }

    // If there is a function call in the function body, decompose the call to the function declaration
    public static String decomposeFunction(Assignment parser, String funcName, String args) {
        ArrayList<String> functionDefinition = parser.functions.get(funcName);
        String newFunction = ""; //stores decomposition as String
        boolean decomposed = false;
        boolean callPresent = false; // tells the function there is a function call that needs to be decomposed

        for (String s : functionDefinition) {
            System.out.println(s);
            if (isNumeric(s)) {
                //System.out.println("Number");
                newFunction += s;
            }

            else if (isParameter(s)) {
                // replace the parameter with the function body e.g. S -> A(2) where A -> x+1 then S -> 2+1
                // first check if the parameters have a function call that needs to be decomposed
                while (true) {
                    String func = findFunction(args);
                    if (func != null) {
                        String funcCall = processFunctionName(func);
                        String funcParams = processFunctionBody(func);
                        String decomposedCall = "(" + decomposeFunction(parser, funcCall, funcParams) + ")";
                        args = args.replace(func, decomposedCall);
                    } else {break;}
                }
                newFunction += "(" + args + ")";

            }

            else if (isOperator(s)) {
                //System.out.println("Operator");
                newFunction += s;
            }

            else if (isFunction(s)) {
                //System.out.println("Function");
                String funcCall = processFunctionName(s);
                String funcParams = processFunctionBody(s);

                // need to check if the function body contains the parameter so that it can swap it for the actual value in "args"
                String funcParameter = findParameter(funcParams);
                if (funcParameter != null) {
                    funcParams = funcParams.replace(funcParameter, args);
                }
                // decompose this function call further using recursion
                String decomposedCall = decomposeFunction(parser, funcCall, funcParams);
                newFunction += "(" + decomposedCall + ")";
                callPresent = true;
            }

        }

        System.out.println("Exiting...");
        return newFunction;
    }

    // finds the function call in the argument body
    public static String findFunction(String str) {
        boolean processing = false;
        int startInt = 0;
        int endInt = str.length();

        for (int i = 0; i < str.length(); i++) {
            if (Character.isUpperCase(str.charAt(i))) {
                if (processing) {
                    continue;
                } else {
                    startInt = i;
                    processing = true;
                }
            } else if (Character.toString(str.charAt(i)).equals(")")) {
                if (processing) {
                    processing = false;
                    endInt = i;
                    return str.substring(startInt, endInt+1);
                }
            }
        }
        return null;
    }

    // finds the function call in the argument body
        public static String findParameter(String str) {
            boolean processing = false;
            int startInt = 0;
            int endInt = str.length();

            for (int i = 0; i < str.length(); i++) {
                if (Character.isLowerCase(str.charAt(i))) {
                    if (processing) {
                        continue;
                    } else {
                        startInt = i;
                        processing = true;
                    }
                } else {
                    if (processing) {
                        processing = false;
                        endInt = i;
                        //System.out.println("PARAMETER FOUND: " + str.substring(startInt, endInt-1));
                        return str.substring(startInt, endInt+1);
                    }
                }
            }

            if (processing) {
                endInt = str.length()-1;
                return str.substring(startInt, endInt+1);
            }
            else {return null;}
        }

    // A utility function to return precedence of a given operator
    // Higher returned value means higher precedence
    public static int Prec(char ch)
    {
        switch (ch)
        {
        case '+':
        case '-':
            return 1;

        case '*':
        case '/':
            return 2;

        case '^':
            return 3;
        }
        return -1;
    }

    // The main method that converts given infix expression
    // to postfix expression.
    public static Queue<String> infixToPostfix(String exp)
    {
        // initializing empty String for result
        String result = new String("");
        Queue<String> postfix = new LinkedList<>();

        // initializing empty stack
        Stack<String> stack = new Stack<>();

        for (int i = 0; i<exp.length(); ++i)
        {
            char c = exp.charAt(i);

             // If the scanned character is an operand, add it to output.
            if (Character.isLetter(c)) {
                result += c;
                postfix.add(Character.toString(c));
            }

            // If the scanned character is an operand, add it to output.
            else if (Character.isDigit(c)) {
                int startInt = i;
                int endInt = i;
                for (int j = i+1; j < exp.length(); j++) {
                    if (Character.isDigit(exp.charAt(j))) {
                        endInt = j;
                        continue;
                    } else {
                        break;
                    }
                }
                String s = exp.substring(startInt, endInt+1);
                System.out.println(s);
                result += s;
                postfix.add(s);
                i = endInt;
            }
            // If the scanned character is an '(', push it to the stack.
            else if (Character.toString(c).equals("(")) {
                stack.push(Character.toString(c));
            }

            //  If the scanned character is an ')', pop and output from the stack
            // until an '(' is encountered.
            else if (Character.toString(c).equals(")"))
            {
                while (!stack.isEmpty() && !stack.peek().equals("(")) {
                    String elem = stack.pop();
                    result += elem;
                    postfix.add(elem);
                }

                if (!stack.isEmpty() && !stack.peek().equals("(")) {
                    System.out.println("Invalid Expression");
                    System.exit(0);
                }
                else
                    stack.pop();
            }
            else // an operator is encountered
            {
                while (!stack.isEmpty() && Prec(c) <= Prec(stack.peek().charAt(0))){
                    if(stack.peek().equals("(")) {
                        System.out.println("Invalid Expression");
                        System.exit(0);
                    }
                    String elem = stack.pop();
                    result += elem;
                    postfix.add(elem);
                }
                stack.push(Character.toString(c));
            }

        }

        // pop all the operators from the stack
        while (!stack.isEmpty()){
            if(stack.peek().equals("(")) {
                System.out.println("Invalid Expression");
                System.exit(0);
            }
            String elem = stack.pop();
            result += elem;
            postfix.add(elem);
        }
        System.out.println(postfix);
        return postfix;
    }

    // Method to evaluate value of a postfix expression from a queue of tokens(operands and operators)
    public static int evaluatePostfix(Queue<String> exp) {
        //create a stack
        Stack<Integer> stack=new Stack<>();

        // Scan all characters one by one
        while (!exp.isEmpty())
        {
            String s = exp.remove();

            // If the scanned character is an operand (number here),
            // push it to the stack.
            if (isNumeric(s))
            stack.push(Integer.parseInt(s));

            //  If the scanned character is an operator, pop two
            // elements from stack apply the operator
            else
            {
                int val1 = stack.pop();
                int val2 = stack.pop();

                switch(s)
                {
                    case "+":
                    stack.push(val2+val1);
                    break;

                    case "*":
                    stack.push(val2*val1);
                    break;
              }
            }
        }
        return stack.pop();
    }
}

PARSER_END(Assignment)

//SKIP: {}

/* Keywords of PLM */
TOKEN: {
    < EOL : "\n" | "\r" |"\r\n" > |
    < SPACE : " " > |
    < DEF : "DEF" > |
    < MAIN : "MAIN" > |
    < FUNC_NAME : (["A"-"Z"])+ > |
    < PARAMETER : (["a"-"z"])+ > |
    < NUMBER : ["0"-"9"] | ["1"-"9"](["0"-"9"])+ > |
    < PLUS : "+" > |
    < TIMES : "*" > |
    < STRING : (<FUNC_NAME>|<PARAMETER>|<NUMBER>)+ > |
    < DECIMAL : ("0" | <NUMBER>) "." ("0" | <NUMBER>) >
}

TOKEN: {
    < LEFT_BRACE : "{" > |
    < RIGHT_BRACE : "}" > |
    < LEFT_PARENTHESIS : "(" > |
    < RIGHT_PARENTHESIS : ")" > |
    < SEMICOLON : ";" > |
    < SPECIAL : (["[", "\\", "^", "$", ".", "|", "?"])+ >
}
void Start():
{
    String name;
    Token f = null;
    String contents = "";
}
{
    (
        // Main and Declaration production rules are broken down to the function names
        // in order to avoid choice conflicts
        try {<DEF>} catch (ParseException e) {throw new ParseException("Missing keyword DEF");}
        try {<SPACE>} catch (ParseException e) {throw new ParseException("Function name after DEF missing");}
        (
            f = <MAIN>
            {
                currentFunc = f.image.toString();
                functions.put(currentFunc, new ArrayList<>());
                callsInCurrent = new ArrayList<>();
            }
            //try {<SPACE>} catch (ParseException e) {throw new ParseException("Main method body is missing");}
            contents = Function_Main()
        |
            try {f = <FUNC_NAME>} catch (ParseException e) {throw new ParseException("Error at the function name");}
            {
                currentFunc = f.image.toString();
                functions.put(currentFunc, new ArrayList<>());
                callsInCurrent = new ArrayList<>();
            }
            try {<SPACE>} catch (ParseException e) {throw new ParseException("Parameter is missing from function declaration");}
            contents = Function_Declaration()
        |
            <DEF>
            { printError("Function name cannot be DEF", lineNumber); }
        |
            <STRING>
            {throw new ParseException("Invalid characters in the function name");}
        )
        {
            name = f.image.toString();
            if (definedFuncs.contains(name)) {
                printError(name + " is already defined", lineNumber);
            } else {
                definedFuncs.add(name);
            }
        }
    )+
    <EOF>
    {
        if (!definedFuncs.contains("MAIN")) {
            lineNumber = 0;
            printError("MAIN is not defined in the program", lineNumber);
        }

        for (int i = 0; i < calledFuncs.size(); i++) {
            if (!definedFuncs.contains(calledFuncs.get(i))) {
                printError(calledFuncs.get(i) + " is not a defined function in the program", lineNumber);
            }
        }

        System.out.println("PASS");
    }
}

String Function_Main():
{
    String body = "";
}
{
    // SPACES AND LEFT BRACE
    try {" { "} catch (ParseException e) {printError("Incorrect syntax at the start of MAIN function body", lineNumber);}

    //MAIN FUNCTION BODY
    try {body = Function_Main_Body()}
    catch (ParseException e) { printError("Main function body is empty", lineNumber); }

    //SPACES AND RIGHT BRACE
    try {" } ;"} catch (ParseException e) {printError("Incorrect syntax at the end of the function declaration", lineNumber);}
    try {<EOL>} catch (ParseException e) {printError("Missing EOL after function declaration", lineNumber);}
    {
        lineNumber++;
        return body;
    }
}

// If a function is defined, the production rule will capture the name, the parameter defined,
// and the function body.
String Function_Declaration():
{
    Token p = null;
    String name;
    String func = "";
}
{
    // PARAMETER
    try {p = <PARAMETER>} catch(ParseException e) { printError("Incorrect value for the parameter", lineNumber);}

    // SPACES AND LEFT BRACE
    try {" { "} catch (ParseException e) {printError("Incorrect syntax at the start of function declaration", lineNumber);}

    // FUNCTION BODY
    try {func = Function_Body(p.image.toString())}
    catch (ParseException e) {printError("Function body is empty", lineNumber);}

    // SPACES AND RIGHT BRACE
    try {
        " } ;"
    } catch (ParseException e) {
        printError("Syntax error: Missing space, '}' or ';' in declaration", lineNumber);
    }

    try {<EOL>} catch (ParseException e) {printError("Missing EOL after function declaration", lineNumber);}
    {
        lineNumber++;
        return func;
    }


}

// Main body will not have any parameters involved
String Function_Main_Body():
{
    Token t = null;
    Token i = null;
    String body = "";
    String call = "";
}
{
    try {(t = <NUMBER> | call = Function_Call(null))} catch (ParseException e) { printError("Incorrect or missing values in function body", lineNumber); }
    {
        if (t == null) {
            body += call;
            functions.get(currentFunc).add(call);
        } else {
            body += t.image.toString();
            functions.get(currentFunc).add(t.image.toString());
        }
    }
    (
        try {<PLUS>} catch (ParseException e) {printError("Operator missing in body", lineNumber);}
        try {(i = <NUMBER> | call = Function_Call(null))} catch (ParseException e) { printError("Incorrect or missing values in function body", lineNumber); }
        {
            body += "+";
            functions.get(currentFunc).add("+");
            if (i == null) {
                body += call;
                functions.get(currentFunc).add(call);
            } else {
                body += i.image.toString();
                functions.get(currentFunc).add(i.image.toString());
            }
        }
    |
        try {<TIMES>} catch (ParseException e) {printError("Operator missing in body", lineNumber);}
        try {(i = <NUMBER> | call = Function_Call(null))} catch (ParseException e) { printError("Incorrect or missing values in function body", lineNumber); }
        {
            body += "*";
            functions.get(currentFunc).add("*");
            if (i == null) {
                body += call;
                functions.get(currentFunc).add(call);
            } else {
                body += i.image.toString();
                functions.get(currentFunc).add(i.image.toString());
            }
        }
    )*

    { return body; }
}

// Calls will be made up of the function name, parenthesis, and a function body which can contains
// a single value or an expression
String Function_Call(String arg):
{
    Token f = null;
    String name;
    String call = "";
    String body = "";
}
{
    {inCall = true;}
    //FUNC_NAME
    (
        try {(f = <FUNC_NAME>)} catch (ParseException e) { printError("Function name is missing", lineNumber); }
    |
        f = <MAIN> {printError("Function name cannot be MAIN", lineNumber);}
    )
    {name = f.image.toString();}

    //LEFT_PARENTHESIS
    try {<LEFT_PARENTHESIS>} catch (ParseException e) {printError("Missing '(' in function call", lineNumber);}

    //FUNCTION_BODY
    try {body = Function_Call_Body(arg)} catch (ParseException e) { printError("Function body is missing", lineNumber); }

    // RIGHT_PARENTHESES
    try {<RIGHT_PARENTHESIS>} catch (ParseException e) {printError("Missing ')' in function call", lineNumber);}

    {
        // checks if the function call is the same name as the function being declared
        if (name.equals(currentFunc) || (calledFuncs.contains(name) && !callsInCurrent.contains(name))) {
            divergence = true;
        }
        calledFuncs.add(name);
        callsInCurrent.add(name);
        call += name + "(" + body + ")";
        return call;
    }
}

String Function_Call_Body(String arg):
{
    Token t = null;
    Token s = null;
    Token o = null;
    String i ;
    String body = "";
    String call = "";
    String token = "";
}
{
    try {(t = <PARAMETER> | t = <NUMBER> | call = Function_Call(null))} catch (ParseException e) { printError("Incorrect or missing values in function body", lineNumber); }
    {
        // Checks to see if the parameter defined in the function declaration is the same as the parameter in the body
        // 2 Separate checks since there can be just a single value or an expression
        if (t != null) {
            i = t.image.toString();
            if (t.kind == PARAMETER && i.equals(arg) == false && arg != null){
                printError("Unexpected parameter value '" + i + "'. Expecting '" + arg + "'", lineNumber);
            } else if (arg == null && t.kind == PARAMETER) {
                printError("MAIN function body cannot have parameters", lineNumber);
            }

            body += i;
        } else {
            body += call;
        }
    }
    (
        try {(o = <PLUS> |o = <TIMES>)} catch (ParseException e) {printError("Missing operator in function  body", lineNumber);}
        {
            if (o.kind == PLUS) {
                body += "+";
            } else {
                body += "*";
            }
        }
        try {(s = <PARAMETER> | s = <NUMBER> | call = Function_Call(null))} catch (ParseException e) { printError("Incorrect or missing values in function body", lineNumber); }
        {
            // Extra check in case the body contains an expression with + or *
            if (s != null) {
                i = s.image.toString();
                if (s.kind == PARAMETER && i.equals(arg) == false && arg != null){
                    printError("Unexpected parameter value '" + i + "'. Expecting '" + arg + "'", lineNumber);
                } else if (arg == null && s.kind == PARAMETER) {
                    printError("MAIN function body cannot have parameters", lineNumber);
                }
                body += i;
            } else {
                body += call;
            }
            s = null;
        }
    )*
    { return body; }
}

String Function_Body(String arg):
{
    Token t = null;
    Token s = null;
    Token o = null;
    String i ;
    String body = "";
    String call = "";
    String token = "";
}
{
    try {(t = <PARAMETER> | t = <NUMBER> | call = Function_Call(null))} catch (ParseException e) { printError("Incorrect or missing values in function body", lineNumber); }
    {
        // Checks to see if the parameter defined in the function declaration is the same as the parameter in the body
        // 2 Separate checks since there can be just a single value or an expression
        if (t != null) {
            i = t.image.toString();
            if (t.kind == PARAMETER && i.equals(arg) == false && arg != null){
                printError("Unexpected parameter value '" + i + "'. Expecting '" + arg + "'", lineNumber);
            } else if (arg == null && t.kind == PARAMETER) {
                printError("MAIN function body cannot have parameters", lineNumber);
            }

            body += i;
            functions.get(currentFunc).add(i);
        } else {
            body += call;
            functions.get(currentFunc).add(call);
        }
    }
    (
        try {(o = <PLUS> |o = <TIMES>)} catch (ParseException e) {printError("Missing operator(s) in functio body", lineNumber);}
        {
            if (o.kind == PLUS) {
                body += "+";
                functions.get(currentFunc).add("+");
            } else {
                body += "*";
                functions.get(currentFunc).add("*");
            }
        }
        try {(s = <PARAMETER> | s = <NUMBER> | call = Function_Call(null))} catch (ParseException e) { printError("Incorrect or missing values in function body", lineNumber); }
        {
            // Extra check in case the body contains an expression with + or *
            if (s != null) {
                i = s.image.toString();
                if (s.kind == PARAMETER && i.equals(arg) == false && arg != null){
                    printError("Unexpected parameter value '" + i + "'. Expecting '" + arg + "'", lineNumber);
                } else if (arg == null && s.kind == PARAMETER) {
                    printError("MAIN function body cannot have parameters", lineNumber);
                }
                body += i;
                functions.get(currentFunc).add(i);
            } else {
                body += call;
                functions.get(currentFunc).add(call);
            }
            s = null;
        }
    )*
    { return body; }
}








