/* Assignment.java */
/* Generated By:JavaCC: Do not edit this line. Assignment.java */
import java.util.*;

public class Assignment implements AssignmentConstants {

    ArrayList<String> definedFuncs = new ArrayList<>();
    ArrayList<String> calledFuncs = new ArrayList<>();

    // Hashmap will store the function names alongside sections of the function bodies
    // The arraylist in the map will store each token separately
    HashMap<String, ArrayList<String>> functions = new HashMap<>();

    // stores all the functions called in the currentFunc
    ArrayList<String> callsInCurrent = new ArrayList<>();

    // keeps track of the function that is being parsed
    String currentFunc = "";
    int lineNumber = 1;
    boolean inCall = false;
    boolean divergence = false;

    public static void main(String args []) throws ParseException, TokenMgrError {

        Assignment parser = new Assignment(System.in);
        try {
            parser.Start();
        } catch (ParseException e) {
            System.out.println("FAIL");
            System.err.println(parser.lineNumber);
            System.err.println(e.getMessage());
            System.exit(0);
        }
        checkDivergence(parser);
        evaluateProgram(parser);
    }

    // method to return error messages to user
    public static void printError(String error, int lineNumber) {
        System.out.println("FAIL");
        System.err.println(lineNumber);
        System.err.println(error);
        System.exit(0);
    }

    public static void evaluateProgram(Assignment parser) {
        System.out.println(parser.functions.get("A"));
        String mainExpression = decomposeFunction(parser, "MAIN", "");
        System.out.println(mainExpression);
        // returns a stack of operations in a postfix order
        Queue<String> exp = infixToPostfix(mainExpression);
        int result = evaluatePostfix(exp);
        System.out.println(result);

    }

    // method to check for infinite loops/recursion by examining function bodies
    public static void checkDivergence(Assignment parser) {
        if (parser.divergence) {System.out.println("DIVERGENCE"); System.exit(0);}
    }

    // Check if the character is numeric
    public static boolean isNumeric(String str) {
        try {
            Double.parseDouble(str);
            return true;
      } catch(NumberFormatException e){
            return false;
      }
    }

    // Check if the character is an operator (* or +)
    public static boolean isOperator(String str) {
        if (str.equals("+") | str.equals("*")) {
            return true;
        }
        return false;
    }

    // Check if the character is the start of a function call (uppercase char)
    public static boolean isFunction(String str) {
        if (Character.isUpperCase(str.charAt(0))) {
            return true;
        }
        return false;
    }

    // Check if the character is a parameter (lowercase char)
    public static boolean isParameter(String str) {
        if (Character.isLowerCase(str.charAt(0))) {
            return true;
        }
        return false;
    }

    // Finds the Function name from the String token
    public static String processFunctionName(String function) {
        String funcName = "";
        //System.out.println(function);
        for (int i = 0; i < function.length(); i++) {
            if (Character.toString(function.charAt(i)).equals("(")) {
                return funcName;
            }
            funcName += function.charAt(i);
        }
        return funcName;
    }

    // Finds the Function body from the String token
    public static String processFunctionBody(String function) {
        String body = "";
         int parenthesisCount = 0;
         for (int i = 0; i < function.length(); i++) {
             if (Character.toString(function.charAt(i)).equals("(")) {
                 parenthesisCount++;
             } else if (Character.toString(function.charAt(i)).equals(")")) {
                 parenthesisCount--;
             }

             if (parenthesisCount > 0) {
                 body += function.charAt(i);
             }
         }
         return body.substring(1, body.length());
    }

    // If there is a function call in the function body, decompose the call to the function declaration
    public static String decomposeFunction(Assignment parser, String funcName, String args) {
        ArrayList<String> functionDefinition = parser.functions.get(funcName);
        String newFunction = ""; //stores decomposition as String
        boolean decomposed = false;
        boolean callPresent = false; // tells the function there is a function call that needs to be decomposed

        for (String s : functionDefinition) {
            System.out.println(s);
            if (isNumeric(s)) {
                //System.out.println("Number");
                newFunction += s;
            }

            else if (isParameter(s)) {
                // replace the parameter with the function body e.g. S -> A(2) where A -> x+1 then S -> 2+1
                // first check if the parameters have a function call that needs to be decomposed
                while (true) {
                    String func = findFunction(args);
                    if (func != null) {
                        String funcCall = processFunctionName(func);
                        String funcParams = processFunctionBody(func);
                        String decomposedCall = "(" + decomposeFunction(parser, funcCall, funcParams) + ")";
                        args = args.replace(func, decomposedCall);
                    } else {break;}
                }
                newFunction += "(" + args + ")";

            }

            else if (isOperator(s)) {
                //System.out.println("Operator");
                newFunction += s;
            }

            else if (isFunction(s)) {
                //System.out.println("Function");
                String funcCall = processFunctionName(s);
                String funcParams = processFunctionBody(s);

                // need to check if the function body contains the parameter so that it can swap it for the actual value in "args"
                String funcParameter = findParameter(funcParams);
                if (funcParameter != null) {
                    funcParams = funcParams.replace(funcParameter, args);
                }
                // decompose this function call further using recursion
                String decomposedCall = decomposeFunction(parser, funcCall, funcParams);
                newFunction += "(" + decomposedCall + ")";
                callPresent = true;
            }

        }

        System.out.println("Exiting...");
        return newFunction;
    }

    // finds the function call in the argument body
    public static String findFunction(String str) {
        boolean processing = false;
        int startInt = 0;
        int endInt = str.length();

        for (int i = 0; i < str.length(); i++) {
            if (Character.isUpperCase(str.charAt(i))) {
                if (processing) {
                    continue;
                } else {
                    startInt = i;
                    processing = true;
                }
            } else if (Character.toString(str.charAt(i)).equals(")")) {
                if (processing) {
                    processing = false;
                    endInt = i;
                    return str.substring(startInt, endInt+1);
                }
            }
        }
        return null;
    }

    // finds the function call in the argument body
        public static String findParameter(String str) {
            boolean processing = false;
            int startInt = 0;
            int endInt = str.length();

            for (int i = 0; i < str.length(); i++) {
                if (Character.isLowerCase(str.charAt(i))) {
                    if (processing) {
                        continue;
                    } else {
                        startInt = i;
                        processing = true;
                    }
                } else {
                    if (processing) {
                        processing = false;
                        endInt = i;
                        //System.out.println("PARAMETER FOUND: " + str.substring(startInt, endInt-1));
                        return str.substring(startInt, endInt+1);
                    }
                }
            }

            if (processing) {
                endInt = str.length()-1;
                return str.substring(startInt, endInt+1);
            }
            else {return null;}
        }

    // A utility function to return precedence of a given operator
    // Higher returned value means higher precedence
    public static int Prec(char ch)
    {
        switch (ch)
        {
        case '+':
        case '-':
            return 1;

        case '*':
        case '/':
            return 2;

        case '^':
            return 3;
        }
        return -1;
    }

    // The main method that converts given infix expression
    // to postfix expression.
    public static Queue<String> infixToPostfix(String exp)
    {
        // initializing empty String for result
        String result = new String("");
        Queue<String> postfix = new LinkedList<>();

        // initializing empty stack
        Stack<String> stack = new Stack<>();

        for (int i = 0; i<exp.length(); ++i)
        {
            char c = exp.charAt(i);

             // If the scanned character is an operand, add it to output.
            if (Character.isLetter(c)) {
                result += c;
                postfix.add(Character.toString(c));
            }

            // If the scanned character is an operand, add it to output.
            else if (Character.isDigit(c)) {
                int startInt = i;
                int endInt = i;
                for (int j = i+1; j < exp.length(); j++) {
                    if (Character.isDigit(exp.charAt(j))) {
                        endInt = j;
                        continue;
                    } else {
                        break;
                    }
                }
                String s = exp.substring(startInt, endInt+1);
                System.out.println(s);
                result += s;
                postfix.add(s);
                i = endInt;
            }
            // If the scanned character is an '(', push it to the stack.
            else if (Character.toString(c).equals("(")) {
                stack.push(Character.toString(c));
            }

            //  If the scanned character is an ')', pop and output from the stack
            // until an '(' is encountered.
            else if (Character.toString(c).equals(")"))
            {
                while (!stack.isEmpty() && !stack.peek().equals("(")) {
                    String elem = stack.pop();
                    result += elem;
                    postfix.add(elem);
                }

                if (!stack.isEmpty() && !stack.peek().equals("(")) {
                    System.out.println("Invalid Expression");
                    System.exit(0);
                }
                else
                    stack.pop();
            }
            else // an operator is encountered
            {
                while (!stack.isEmpty() && Prec(c) <= Prec(stack.peek().charAt(0))){
                    if(stack.peek().equals("(")) {
                        System.out.println("Invalid Expression");
                        System.exit(0);
                    }
                    String elem = stack.pop();
                    result += elem;
                    postfix.add(elem);
                }
                stack.push(Character.toString(c));
            }

        }

        // pop all the operators from the stack
        while (!stack.isEmpty()){
            if(stack.peek().equals("(")) {
                System.out.println("Invalid Expression");
                System.exit(0);
            }
            String elem = stack.pop();
            result += elem;
            postfix.add(elem);
        }
        System.out.println(postfix);
        return postfix;
    }

    // Method to evaluate value of a postfix expression from a queue of tokens(operands and operators)
    public static int evaluatePostfix(Queue<String> exp) {
        //create a stack
        Stack<Integer> stack=new Stack<>();

        // Scan all characters one by one
        while (!exp.isEmpty())
        {
            String s = exp.remove();

            // If the scanned character is an operand (number here),
            // push it to the stack.
            if (isNumeric(s))
            stack.push(Integer.parseInt(s));

            //  If the scanned character is an operator, pop two
            // elements from stack apply the operator
            else
            {
                int val1 = stack.pop();
                int val2 = stack.pop();

                switch(s)
                {
                    case "+":
                    stack.push(val2+val1);
                    break;

                    case "*":
                    stack.push(val2*val1);
                    break;
              }
            }
        }
        return stack.pop();
    }

  final public void Start() throws ParseException {String name;
    Token f = null;
    String contents = "";
    label_1:
    while (true) {
      try {
        jj_consume_token(DEF);
      } catch (ParseException e) {
{if (true) throw new ParseException("Missing keyword DEF");}
      }
      try {
        jj_consume_token(SPACE);
      } catch (ParseException e) {
{if (true) throw new ParseException("Function name after DEF missing");}
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAIN:{
        f = jj_consume_token(MAIN);
currentFunc = f.image.toString();
                functions.put(currentFunc, new ArrayList<>());
                callsInCurrent = new ArrayList<>();
        //try {<SPACE>} catch (ParseException e) {throw new ParseException("Main method body is missing");}
                    contents = Function_Main();
        break;
        }
      case FUNC_NAME:{
        try {
          f = jj_consume_token(FUNC_NAME);
        } catch (ParseException e) {
{if (true) throw new ParseException("Error at the function name");}
        }
currentFunc = f.image.toString();
                functions.put(currentFunc, new ArrayList<>());
                callsInCurrent = new ArrayList<>();
        try {
          jj_consume_token(SPACE);
        } catch (ParseException e) {
{if (true) throw new ParseException("Function body after function name is missing");}
        }
        contents = Function_Declaration();
        break;
        }
      case DEF:{
        jj_consume_token(DEF);
printError("Function name cannot be DEF", lineNumber);
        break;
        }
      case STRING:{
        jj_consume_token(STRING);
{if (true) throw new ParseException("Invalid characters in the function name");}
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
name = f.image.toString();
            if (definedFuncs.contains(name)) {
                printError(name + " is already defined", lineNumber);
            } else {
                definedFuncs.add(name);
            }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEF:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
if (!definedFuncs.contains("MAIN")) {
            lineNumber = 0;
            printError("MAIN is not defined in the program", lineNumber);
        }

        for (int i = 0; i < calledFuncs.size(); i++) {
            if (!definedFuncs.contains(calledFuncs.get(i))) {
                printError(calledFuncs.get(i) + " is not a defined function in the program", lineNumber);
            }
        }

        System.out.println("PASS");
}

  final public String Function_Main() throws ParseException {String body = "";
    jj_consume_token(SPACE);
    jj_consume_token(LEFT_BRACE);
    jj_consume_token(SPACE);
    try {
      body = Function_Main_Body();
    } catch (ParseException e) {
printError("Main function body is empty", lineNumber);
    }
    try {
      jj_consume_token(16);
    } catch (ParseException e) {
printError("Unexpected characters in function body", lineNumber);
    }
    try {
      jj_consume_token(EOL);
    } catch (ParseException e) {
printError("Unexpected syntax after ';'", lineNumber);
    }
lineNumber++;
        {if ("" != null) return body;}
    throw new Error("Missing return statement in function");
}

// If a function is defined, the production rule will capture the name, the parameter defined,
// and the function body.
  final public String Function_Declaration() throws ParseException {Token p = null;
    String name;
    String func = "";
    try {
      p = jj_consume_token(PARAMETER);
    } catch (ParseException e) {
printError("Parameter is missing after function definition", lineNumber);
    }
    jj_consume_token(17);
    try {
      func = Function_Body(p.image.toString());
    } catch (ParseException e) {
printError("Function body is empty", lineNumber);
    }
    try {
      jj_consume_token(16);
    } catch (ParseException e) {
printError("Syntax error: Missing space, '}' or ';' in declaration", lineNumber);
    }
    try {
      jj_consume_token(EOL);
    } catch (ParseException e) {
printError("Unexpected syntax after ';'", lineNumber);
    }
lineNumber++;
        {if ("" != null) return func;}
    throw new Error("Missing return statement in function");
}

// Main body will not have any parameters involved
  final public String Function_Main_Body() throws ParseException {Token t = null;
    Token i = null;
    String body = "";
    String call = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        t = jj_consume_token(NUMBER);
        break;
        }
      case MAIN:
      case FUNC_NAME:{
        call = Function_Call(null);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
printError("Missing numerical value or function call in body", lineNumber);
    }
if (t == null) {
            body += call;
            functions.get(currentFunc).add(call);
        } else {
            body += t.image.toString();
            functions.get(currentFunc).add(t.image.toString());
        }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case TIMES:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        try {
          jj_consume_token(PLUS);
        } catch (ParseException e) {
printError("Unexpected syntax occurred near '+'", lineNumber);
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUMBER:{
          i = jj_consume_token(NUMBER);
          break;
          }
        case MAIN:
        case FUNC_NAME:{
          call = Function_Call(null);
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
body += "+";
            functions.get(currentFunc).add("+");
            if (i == null) {
                body += call;
                functions.get(currentFunc).add(call);
            } else {
                body += i.image.toString();
                functions.get(currentFunc).add(i.image.toString());
            }
        break;
        }
      case TIMES:{
        try {
          jj_consume_token(TIMES);
        } catch (ParseException e) {
printError("Unexpected syntax occurred near '+'", lineNumber);
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUMBER:{
          i = jj_consume_token(NUMBER);
          break;
          }
        case MAIN:
        case FUNC_NAME:{
          call = Function_Call(null);
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
body += "*";
            functions.get(currentFunc).add("*");
            if (i == null) {
                body += call;
                functions.get(currentFunc).add(call);
            } else {
                body += i.image.toString();
                functions.get(currentFunc).add(i.image.toString());
            }
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return body;}
    throw new Error("Missing return statement in function");
}

// Calls will be made up of the function name, parenthesis, and a function body which can contains
// a single value or an expression
  final public String Function_Call(String arg) throws ParseException {Token f = null;
    String name;
    String call = "";
    String body = "";
inCall = true;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FUNC_NAME:{
      try {
        f = jj_consume_token(FUNC_NAME);
      } catch (ParseException e) {
printError("Function name is missing", lineNumber);
      }
      break;
      }
    case MAIN:{
      f = jj_consume_token(MAIN);
printError("Function name cannot be MAIN", lineNumber);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
name = f.image.toString();
    jj_consume_token(LEFT_PARENTHESIS);
    try {
      body = Function_Call_Body(arg);
    } catch (ParseException e) {
printError("Function body is missing", lineNumber);
    }
    jj_consume_token(RIGHT_PARENTHESIS);
// checks if the function call is the same name as the function being declared
        if (name.equals(currentFunc) || (calledFuncs.contains(name) && !callsInCurrent.contains(name))) {
            divergence = true;
        }
        calledFuncs.add(name);
        callsInCurrent.add(name);
        call += name + "(" + body + ")";
        {if ("" != null) return call;}
    throw new Error("Missing return statement in function");
}

  final public String Function_Call_Body(String arg) throws ParseException {Token t = null;
    Token s = null;
    Token o = null;
    String i ;
    String body = "";
    String call = "";
    String token = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PARAMETER:{
      t = jj_consume_token(PARAMETER);
      break;
      }
    case NUMBER:{
      t = jj_consume_token(NUMBER);
      break;
      }
    case MAIN:
    case FUNC_NAME:{
      call = Function_Call(arg);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
// Checks to see if the parameter defined in the function declaration is the same as the parameter in the body
        // 2 Separate checks since there can be just a single value or an expression
        if (t != null) {
            i = t.image.toString();
            if (t.kind == PARAMETER && i.equals(arg) == false && arg != null){
                printError("Parameter not allowed in function body", lineNumber);
            } else if (arg == null && t.kind == PARAMETER) {
                printError("MAIN function body cannot have parameters", lineNumber);
            }

            body += i;
        } else {
            body += call;
        }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case TIMES:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        o = jj_consume_token(PLUS);
        break;
        }
      case TIMES:{
        o = jj_consume_token(TIMES);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
if (o.kind == PLUS) {
                body += "+";
            } else {
                body += "*";
            }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PARAMETER:{
        s = jj_consume_token(PARAMETER);
        break;
        }
      case NUMBER:{
        s = jj_consume_token(NUMBER);
        break;
        }
      case MAIN:
      case FUNC_NAME:{
        call = Function_Call(arg);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
// Extra check in case the body contains an expression with + or *
            if (s != null) {
                i = s.image.toString();
                if (s.kind == PARAMETER && i.equals(arg) == false && arg != null){
                    printError("Parameter not allowed in function body", lineNumber);
                } else if (arg == null && s.kind == PARAMETER) {
                    printError("MAIN function body cannot have parameters", lineNumber);
                }
                body += i;
            } else {
                body += call;
            }
            s = null;
    }
{if ("" != null) return body;}
    throw new Error("Missing return statement in function");
}

  final public String Function_Body(String arg) throws ParseException {Token t = null;
    Token s = null;
    Token o = null;
    String i ;
    String body = "";
    String call = "";
    String token = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PARAMETER:{
      t = jj_consume_token(PARAMETER);
      break;
      }
    case NUMBER:{
      t = jj_consume_token(NUMBER);
      break;
      }
    case MAIN:
    case FUNC_NAME:{
      call = Function_Call(arg);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
// Checks to see if the parameter defined in the function declaration is the same as the parameter in the body
        // 2 Separate checks since there can be just a single value or an expression
        if (t != null) {
            i = t.image.toString();
            if (t.kind == PARAMETER && i.equals(arg) == false && arg != null){
                printError("Parameter not allowed in function body", lineNumber);
            } else if (arg == null && t.kind == PARAMETER) {
                printError("MAIN function body cannot have parameters", lineNumber);
            }

            body += i;
            functions.get(currentFunc).add(i);
        } else {
            body += call;
            functions.get(currentFunc).add(call);
        }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case TIMES:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        o = jj_consume_token(PLUS);
        break;
        }
      case TIMES:{
        o = jj_consume_token(TIMES);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
if (o.kind == PLUS) {
                body += "+";
                functions.get(currentFunc).add("+");
            } else {
                body += "*";
                functions.get(currentFunc).add("*");
            }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PARAMETER:{
        s = jj_consume_token(PARAMETER);
        break;
        }
      case NUMBER:{
        s = jj_consume_token(NUMBER);
        break;
        }
      case MAIN:
      case FUNC_NAME:{
        call = Function_Call(arg);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
// Extra check in case the body contains an expression with + or *
            if (s != null) {
                i = s.image.toString();
                if (s.kind == PARAMETER && i.equals(arg) == false && arg != null){
                    printError("Parameter not allowed in function body", lineNumber);
                } else if (arg == null && s.kind == PARAMETER) {
                    printError("MAIN function body cannot have parameters", lineNumber);
                }
                body += i;
                functions.get(currentFunc).add(i);
            } else {
                body += call;
                functions.get(currentFunc).add(call);
            }
            s = null;
    }
{if ("" != null) return body;}
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public AssignmentTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x800e,0x2,0x100c,0x6000,0x100c,0x100c,0x6000,0xc,0x101c,0x6000,0x6000,0x101c,0x101c,0x6000,0x6000,0x101c,};
	}

  /** Constructor with InputStream. */
  public Assignment(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Assignment(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new AssignmentTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Assignment(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new AssignmentTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new AssignmentTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Assignment(AssignmentTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AssignmentTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[18];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 16; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 18; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
